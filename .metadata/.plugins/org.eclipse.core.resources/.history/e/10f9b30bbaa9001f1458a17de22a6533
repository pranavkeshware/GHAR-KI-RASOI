package com.app.controller;

import com.app.dto.ResponseDTO;
import com.app.pojos.Orders;
import com.app.service.OrdersServiceImpl;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.util.StreamUtils;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

@CrossOrigin
@RestController
@RequestMapping("/api/payment")
public class PaymentController {

    @Autowired
    private OrdersServiceImpl ordersService;

    @Value("${razorpay.webhook.secret}")
    private String razorpayWebhookSecret; // Fetch webhook secret from properties file

    @Value("${razorpay.key.id}")
    private String keyId; // Razorpay Key ID

    // Endpoint to create an order and initiate payment with Razorpay
    @PostMapping("/createOrder")
    public ResponseEntity<ResponseDTO> createOrder(@RequestParam int customerId, @RequestParam int homeMakerId, @RequestParam String amount) {
        try {
            Orders order = ordersService.createOrder(customerId, homeMakerId, amount);

            // Create response object with order details and Razorpay key
            JSONObject orderResponse = new JSONObject();
            orderResponse.put("id", order.getOrderId()); // Razorpay order ID
            orderResponse.put("key", keyId); // Add the Razorpay API Key ID
            orderResponse.put("amount", Long.parseLong(amount) * 100); // Amount in paise
            orderResponse.put("currency", "INR"); // Currency

            return ResponseEntity.ok(new ResponseDTO("Order Created Successfully", orderResponse));
        } catch (Exception e) {
            return ResponseEntity.status(500).body(new ResponseDTO("Failed to create order", null));
        }
    }

    // Endpoint to handle Razorpay payment status update after transaction
    @PostMapping("/paymentStatus")
    public ResponseEntity<ResponseDTO> updatePaymentStatus(
            @RequestParam String paymentId,
            @RequestParam String orderId,
            @RequestParam String status,
            @RequestParam String receipt) {

        Orders updatedOrder = ordersService.updatePaymentStatus(paymentId, orderId, status, receipt);
        if (updatedOrder != null) {
            return ResponseEntity.ok(new ResponseDTO("Payment Status Updated Successfully", updatedOrder));
        } else {
            return ResponseEntity.status(404).body(new ResponseDTO("Order Not Found", null));
        }
    }

    // Webhook endpoint to handle Razorpay events
    @PostMapping("/webhook")
    public ResponseEntity<String> handleRazorpayWebhook(HttpServletRequest request) {
        try {
            // Read the incoming request body (raw JSON)
            InputStream inputStream = request.getInputStream();
            String requestBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);

            // Verify the webhook signature (to ensure the event is from Razorpay)
            String razorpaySignature = request.getHeader("X-Razorpay-Signature");
            if (!verifyWebhookSignature(requestBody, razorpaySignature)) {
                return ResponseEntity.status(400).body("Invalid Signature");
            }

            // Parse the received event data
            JSONObject event = new JSONObject(requestBody);
            String eventType = event.getString("event");

            // Handle different events (e.g., payment captured or failed)
            if ("payment.captured".equals(eventType)) {
                String paymentId = event.getJSONObject("payload").getJSONObject("payment").getString("id");
                String orderId = event.getJSONObject("payload").getJSONObject("payment").getString("order_id");
                // Update the payment status in the database
                ordersService.updatePaymentStatus(paymentId, orderId, "SUCCESS", null);
            } else if ("payment.failed".equals(eventType)) {
                String paymentId = event.getJSONObject("payload").getJSONObject("payment").getString("id");
                String orderId = event.getJSONObject("payload").getJSONObject("payment").getString("order_id");
                // Update the payment status in the database
                ordersService.updatePaymentStatus(paymentId, orderId, "FAILED", null);
            }

            return ResponseEntity.ok("Webhook received successfully");
        } catch (IOException e) {
            return ResponseEntity.status(500).body("Error while processing webhook");
        }
    }

    // Method to verify the webhook signature
    private boolean verifyWebhookSignature(String requestBody, String razorpaySignature) {
        // Calculate the HMAC SHA256 signature using the webhook secret and compare it with the Razorpay signature
        try {
            String calculatedSignature = calculateHmacSHA256(requestBody, razorpayWebhookSecret);
            return calculatedSignature.equals(razorpaySignature);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // HMAC SHA256 hash function to verify the signature
    private String calculateHmacSHA256(String data, String key) throws Exception {
        javax.crypto.Mac mac = javax.crypto.Mac.getInstance("HmacSHA256");
        javax.crypto.spec.SecretKeySpec secretKeySpec = new javax.crypto.spec.SecretKeySpec(key.getBytes(), "HmacSHA256");
        mac.init(secretKeySpec);
        byte[] hash = mac.doFinal(data.getBytes());
        return bytesToHex(hash);
    }

    // Convert byte array to hexadecimal string
    private String bytesToHex(byte[] bytes) {
        StringBuilder hexString = new StringBuilder();
        for (byte b : bytes) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        return hexString.toString();
    }
}
